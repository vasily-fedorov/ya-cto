#+title: Tech debt
#+setupfile: ~/org/conf/setupfile.org

* Задача
Напиши урок, соответствующий одному из образовательных результатов темы (то, что студент будет знать/уметь после прохождения урока):
5. Понимает, как управлять тех долгом. 
* Управление техническим долгом для CTO
Эпиграф: "Правило 7. Приминание травы может отнять любое количество времени." (с) Правила Ашманова.
** Введение
 * CTO (Chief Technology Officer) ::  главный технический директор компании. Он отвечает за разработку и реализацию технологической стратегии, управление техническими командами, а также за внедрение новых технологий и инноваций *для достижения бизнес-целей компании*.
   Чтобы управлять техническим долгом, необходимо договориться что это такое, как его измерить, какими способами его изменить и как оценить результат изменений.
** Определение технического долга
 * ChatGPT ::
 Технический долг — это метафора в разработке программного обеспечения, обозначающая необходимость в будущем исправить проблемы или улучшить код, которые были отложены ради быстрого достижения результатов. Это может проявляться в виде неэффективных решений, временных обходных путей или плохой архитектуры, что может привести к более высоким затратам на поддержку и доработку в будущем.
 * [[https://ru.wikipedia.org/wiki/Технический_долг][Википедия]] ::
Технический долг (также известный как долг кодинга) — это метафора программной инженерии, обозначающая накопленные в программном коде или архитектуре проблемы, связанные с пренебрежением к качеству при разработке программного обеспечения и вызывающие дополнительные затраты труда в будущем.
 * [[https://www.atlassian.com/ru/agile/software-development/technical-debt][Atlassian]] ::
   Технический долг — это разница между тем, что было обещано, и тем, что было поставлено в действительности.
 * CTO Handbook ::
   "tech debt is technical decision, implementation, or nuance that actively reduces the efficiency or effectiveness of the business today or in the future."
  Технический долг — это техническое решение, реализация или нюанс, который активно снижает эффективность или действенность бизнеса сегодня или в будущем.
   
*Вопросы*:
1. В чем разница и какие проблемы у этих определений?
2. Чем legacy код отличается от технического долга?
3. Каков технический долг в замороженном проекте?

Будем использовать последнее - из CTO Handbook, как наиболее соответствующее точке зрения CTO.

*Ответы*:
1. Википедия считает что мы неграмотны и пренебрегли качеством - видимо, по незнанию. Atlassian думает о прошлых обещаниях, а не о будущих целях бизнеса.
2. Legacy код не является техническим долгом, если не требует изменений при развитии бизнеса. "Работает - не трогай".
3. В замороженном проекте технического долга нет, потому что у замороженного проекта нет настоящего и будущего.

*** Типы технического долга
Во-первых, технический долг бывает двух типов:
 * Неосознанный :: добились работоспособного результата к дедлайну - ну вроде и молодцы, потом что-то где-то в производстве стало разваливаться - стали думать что же теперь с этим делать.
 * Осознанный :: понимаем как выглядит идеальная картина, на какие отступления от идеальной картины мы пошли ради каких бизнес-результатов.

Во-вторых, технический долг бывает 7 типов:
1. **Долг по архитектуре** или **дизайну** возникает, когда проект программного обеспечения не способен удовлетворить ближайшие или будущие потребности бизнеса.
2. **Долг по коду** накапливается, когда реализация была выполнена без учета лучших практик, что приводит к коду, трудно понятному и поддерживаемому.
3. **Долг по тестированию** накапливается, когда проведено недостаточное количество автоматизированных тестов для обеспечения уверенности команды в правильности кодовой базы.
4. **Долг по инфраструктуре** возникает, когда инфраструктура, наблюдаемость и вспомогательные системы не являются надежными или плохо поддерживаются.
5. **Долг по документации** возникает, когда недостаточно документации или она устарела/недостоверна, что затрудняет знакомство членов команды с проектом.
6. **Долг по навыкам** возникает, когда у членов команды недостаточно навыков для поддержания или обновления кода или окружающей инфраструктуры.
7. **Процессный долг** накапливается, когда команда несогласованно решает проблемы, что приводит к ошибкам, задержкам или повышенным затратам.

Хочется отметить, что только один из указанных здесь долгов имеет непосредственное отношение к коду, хотя понятие "технический долг" регулярно сводят к проблемам кода и борются с техническим долгом с помощью code review и разного рода анализаторов кода.

** Инвентаризация долга
Итак, технический долг мешает производственной команде добиваться бизнес-результатов для компании. Как же узнать что мешает команде?
Гениальная идея:
*** Давайте спросим?
1. Организуем регулярный (например, ежеквартальный) опрос: для каждого из типов долга каждый член команды пусть поставит оценку сколько мы задолжали от 1 до 10 и допишет несколько поясняющих предложений.
2. Для качественных ответов вся команда должна понимать что такое технический долг и каковы цели компании.
3. Результаты требуют интеллектуальной недемократической обработки.

*Вопрос*: для каждого из типов долга поставьте оценку величины задолженности в баллах от 1 до 10 на текущем месте работы и напишите несколько поясняющих предложений.

*** Давайте измерим?
Для некоторых типов долга можно количественно измерить некоторые метрики работы производства. Давайте подумаем какие. Например:
 * Архитектура ::
   * Итоги нагрузочного тестирования: количество запросов в секунду, время обработки запросов и т.д.
 * Код ::
   * SonarQube ([[http://sqale.org/][SQALE]])
   * Codescene.io ([[https://codescene.com/blog/measure-code-health-of-your-codebase][code health]])
   * Codacy ([[https://blog.codacy.com/code-quality-metrics][code quality metrics]])
и т.д.
   А вот, например, хвастливое сравнение codescene с sonarqube со стороны codescene: https://codescene.com/blog/6x-improvement-over-sonarqube
 * Тестирование ::
   * Объем покрытия кода тестами
   * Количество багов в релизе
 * Инфраструктура ::
   * Количество сбоев за период
   * Срок восстановления после сбоев
   * Количество задетых сбоями пользователей
   * Время простоя команды вследствие неработоспособности инфраструктуры
 * Документация ::
   * Скорость онбординга в команду
 * Навыки ::
   * Конкурентная ЗП по требуемым для работы навыкам
   * Срок поика кандидата с необходимыми навыками
 * Процессы ::
   * Количество нецелевых задач в трекере
   * Скорость решения задачи в трекере
   * Количество зависших задач в трекере

И так далее.

*Вопрос*: предложите свою метрики по каждому типу долга- укажите тип долга, принцип измерения, ожидаемый результат.

**  Управление техническим долгом

*Вопрос*: Верны ли утверждения про технический долг:
      1. Необходимо стараться исправлять все неоптимальные решения.
      2. Необходимо стараться всеми силами избегать его появления.
*Ответ*: Нет, технический долг является компромиссом между скоростью получения бизнес-результатов и идеальной организацией производства.

Стратегии пошагения долга:
1. По мере необходимости.
   /"Встретили какой-то долг и давайте исправлять"/. Самый распространенный подход.
   Плюсы:
   - Не требует планирования и осмысленного управления.
   - Можно прятать работу от бизнес-заказчиков
   Минусы:
   - Риск финансирования приминания травы: /"производство устроено не идеально, давайте заниматься доведением его до идеала"/.
   - Явный конфликт задач уменьшения техдолга с более приоритетными бизнес-результатами спринта, отсюда риск недофинансирования техдолга - если не успеваем (как обычно), выкинем из спринта то что не приоритетно.
2. Периодически.
Тратить специально выделенное время через фиксированные интервалы на работу над техническим долгом.
Например:
 * день в спринт, пару дней в месяц, пару недель в квартал
 * 20% времени (в духе Google, хотя в Google можно работать над любым своим проектом)
 * 2 недели через 6 недель ([[https://basecamp.com/shapeup][метод ShapeUp]] от Basecamp)
3. Непрерывно.
Выделить специальную команду для внутренней работы над техническим долгом. В этом случае крайне важно поставить команде измеримые цели для их работы.

В более-менее здоровой ситуации от 10 до 20% усилий уходит на работу над техническим долгом.

Выбранную стратегию работы над техдолгом по-хорошему надо согласовать с руководством и проинформировать о ней бизнес-заказчиков ваших работ.

В идеале коммуникация с бизнесом должна выглядеть как "мы инвестируем X денег в сокращение технического долга, за эти инвестиции компания получит такие-то результаты, которые помогут заработать Y денег".

*Вопрос:* "Когда же будет про код ревью?"
*Ответ*: А вот оно, держите:
1. Введите код ревью.
2. Встройте анализатор кода в CI/CD.
3. Развивайте юнит-тесты.
4. Занимайтесь рефакторингом.
Но этого мало, это только часть обязанностей CTO.

** Банкротство
Если техническим долгом управляли плохо, то наступает банкротство по долгу:
- Вы регулярно сталкиваетесь с сбоями в производстве, имеющими материальное влияние на бизнес.
- Вы получаете постоянные возражения или преувеличенные сроки на новые функции из-за необходимости справляться с долгами.
- Команда жалуется, что кодовая база слишком сложная для выполнения работы.
- Новые функции не могут быть выпущены без случайного повреждения старых функций или внедрения неприемлемо высокого уровня дефектов.

 Если вы оказались в ситуации банкротства по техническому долгу, пришло время поднять тревогу, пересмотреть ожидания со заинтересованными сторонами, разработать план по консолидированию долга и немедленно начать его погашение.

** Выводы
1. Технический долг неизбежен
2. Технический долг диктуется требованиями бизнеса к производству.
3. Техническим долгом можно и нужно управлять для обеспечения эффективности бизнеса.

** Практическое задание
  - Оценить текущий уровень технического долга в вашем проекте
  - Подготовить план по его сокращению на ближайшие несколько месяцев

* TODO Ссылки
** CTO Handbook
https://github.com/ZachGoldberg/Startup-CTO-Handbook
** SQALE
Методология измерения и управления техническим долгом, реализована, в частности, в sonarqube
http://sqale.org/objective/details
https://en.wikipedia.org/wiki/SQALE
** HABR: Управление техническим долгом
https://habr.com/ru/articles/761508/
** HABR: Технический долг. Как не обанкротиться
https://habr.com/ru/articles/719836/
Осознанный и неосознанный техдолг
** [[https://jujodi.medium.com/cool-downs-in-shape-up-some-practical-guidance-4f3656ceaaa][Cool-Downs in Shape Up — Some Practical Guidance]]
